import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase-server'
import { scheduleContentGeneration } from '@/lib/qstash'

// 테스트용 엔드포인트 - 1분 후 실행되는 샘플 스케줄 생성
export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // DOGFOODING MODE: Skip auth check
    const user = { id: '00000000-0000-0000-0000-000000000001' }

    // 1분 후 실행되는 테스트 스케줄 데이터
    const testScheduleData = {
      name: 'QStash Test Schedule',
      content_type: 'x_post',
      content_tone: 'casual',
      topic: 'AI and Technology Testing',
      target_audience: 'Developers',
      additional_instructions: 'This is a test post generated by QStash',
      frequency: 'daily',
      time_of_day: '09:00',
      timezone: 'Asia/Seoul'
    }

    // 1분 후 실행 시간 계산
    const nextRun = new Date()
    nextRun.setMinutes(nextRun.getMinutes() + 1) // 1분 후

    // Create test schedule in database
    const { data, error } = await supabase
      .from('schedules')
      .insert({
        user_id: user.id,
        ...testScheduleData,
        is_active: true,
        next_run_at: nextRun.toISOString(),
      })
      .select()
      .single()

    if (error) {
      console.error('Error creating test schedule:', error)
      return NextResponse.json(
        { error: 'Failed to create test schedule' },
        { status: 500 }
      )
    }

    // Schedule with QStash
    let qstashScheduled = false
    let messageId = null

    if (process.env.QSTASH_TOKEN) {
      try {
        messageId = await scheduleContentGeneration(data.id, nextRun)
        
        // Update schedule with QStash message ID
        await supabase
          .from('schedules')
          .update({ qstash_message_id: messageId })
          .eq('id', data.id)
          
        qstashScheduled = true
        console.log('Test schedule created and queued with QStash:', messageId)
      } catch (qstashError) {
        console.error('Failed to schedule with QStash:', qstashError)
        return NextResponse.json(
          { error: `QStash scheduling failed: ${qstashError.message}` },
          { status: 500 }
        )
      }
    } else {
      return NextResponse.json(
        { error: 'QStash not configured. Please set QSTASH_TOKEN and NEXT_PUBLIC_URL' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      message: 'Test schedule created! Content will be generated in 1 minute.',
      scheduleId: data.id,
      executeAt: nextRun.toISOString(),
      qstashMessageId: messageId,
      checkUrl: '/content/library'
    })

  } catch (error) {
    console.error('Error creating test schedule:', error)
    return NextResponse.json(
      { error: 'Failed to create test schedule' },
      { status: 500 }
    )
  }
}